#!/usr/bin/env python3

import sys
from google.protobuf.compiler.plugin_pb2 import CodeGeneratorResponse, CodeGeneratorRequest
from google.protobuf.descriptor_pb2 import FileDescriptorProto, DescriptorProto
from google.protobuf.descriptor import FieldDescriptor

def get_case_str(message: DescriptorProto):
  return f'''#ifdef USE_{message.name}
    case Top_{message.name}_tag:
    handle{message.name}(incomingMessage.sub.{message.name});
    break;
#endif
'''
  
def digest_proto(proto: FileDescriptorProto):
  ret = ""
  excluded = ("Top" "Ack")
  for message in proto.message_type:
    if message.name not in excluded:
      case_str = get_case_str(message)
      ret += case_str
  return ret

def generate_code(request: CodeGeneratorRequest) -> str:
  body = ""
  
  for file_name in request.file_to_generate:
    proto = next(file for file in request.proto_file if file.name == file_name)
    body += digest_proto(proto)

  return '''/** Generated File Do not Track.
 * Generated by gen-firment.py based on .proto file.
 * Provides first-level handling of received messages.
 * */
#include <project_comms.h>

void fmt_handleRx(void)
{
  Top incomingMessage;
  if (fmt_getMsg(&incomingMessage))
  {
    switch (incomingMessage.which_sub)
    {
    case Top_Ack_tag:
    {
      Ack subMsg = incomingMessage.sub.Ack;
      break;
    }
''' + body + '''
    default:
    }
  }
}
'''

if __name__ == "__main__":
  request = CodeGeneratorRequest.FromString(sys.stdin.buffer.read())
  response = CodeGeneratorResponse()
  widgets_file = response.file.add(name="fmt_rx.pb.c")
  widgets_file.content = generate_code(request)
  sys.stdout.buffer.write(response.SerializeToString())